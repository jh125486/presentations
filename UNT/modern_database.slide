# Modern Databases
Persistent storage in three flavors
08:30 26 Mar 2024

Dr. Jacob Hochstetler
Distinguished Engineer, Vice President, Fidelity Investments
Clinical Assistant Professor, University of North Texas 
Jacob.Hochstetler@UNT.edu
Jacob.Hochstetler@Fidelity.com
https://github.com/jh125486

## Agenda

- Introduction
- Background
  - Networks
  - Distributed computing
  - CAP / PACELC
  - ACID vs. BASE
- AWS' Physalia
- CockroachDB
- TigerBeetle
- Conclusion

## Introduction

Introduction to modern databases and their importance.

- Evolution of databases
- Challenges in the modern era
- Overview of the presentation

## Background: Networks

- Single database -> single client
- Single database -> multiple clients
- Clustered database -> multiple clients

Question: *Better to scale "up" or scale "out"?*

## Background: Distributed Computing

- Definition and significance
- Distributed database architectures
- Advantages and challenges

- Achieving Consensus and Quorum 
- "Clocks": transactions
- Consensus algorithms: Paxos, Raft

## Background: CAP / PACELC

- CAP theorem explained
- PACELC extension
- Real-world implications for databases

## Background: CAP Theorem

XXX who/what/when

.image images/CAP-Theorem.png 470 _
.caption XXX Tradeoff

## Background: PACELC extension

XXX who/what/when

.image images/pacelc_sloppy.png 440 _
.caption If there is a partition (P) how does the system tradeoff between availability and consistency (A and C); else (E) when the system is running as normal in the absence of partitions, how does the system tradeoff between latency (L) and consistency (C)?

## Background: Implications

Types of Database replication 

- master/master
- master/slaves

XXX more

## Background: ACID vs. BASE

- ACID

---

- BASE

## AWS' Physalia: Overview

Introduction to AWS' Physalia and its features.

- Overview of Physalia
- Architecture and design principles
- Use cases and benefits
- Written in "safe" [Java](https://go.dev) with TLA+

XXX ACID or BASE?
XXX link to doi paper 

## Physalia: Key Concepts

Deep dive into the key concepts of Physalia.

- Consistency models
- Partitioning and replication
- Handling failures

## Physalia: Testing

## Physalia: In Action

Exploring real-world applications of Physalia.

- Case studies
- Performance metrics
- Lessons learned

## CockroachDB: Overview

Overview of CockroachDB and its architecture.

- Introduction to CockroachDB
- Key features and advantages
- Architectural overview
- Written in "safe" [Golang](https://go.dev)

XXX ACID or BASE?
XXX link to doi paper

## CockroachDB: Key Concepts

Understanding the core components of CockroachDB.

- Storage layer
- SQL layer
- Distributed transactions

## CockroachDB: Testing


## CockroachDB: In Action

Examining use cases and success stories of CockroachDB.

- Industry applications
- Scalability and resilience
- Migration stories

## TigerBeetle: Overview

Introducing TigerBeetle and its unique approach.

- What is TigerBeetle?
- Design goals and principles
- Comparison with other databases
- Written in "safe" [Zig XXX](https://zig.dev)

XXX ACID or BASE?
XXX link to doi paper

## TigerBeetle: Key Concepts

Exploring the features of TigerBeetle.

- Performance benchmarks
- Consistency and durability
- API and client libraries

## TigerBeetle: Testing

## TigerBeetle: In Action

Discussing practical applications of TigerBeetle.

- Use case scenarios
- Integration with existing systems
- Future developments

## Conclusion

