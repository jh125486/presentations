Miles to Go...
Golang for Competitive Programming?
15:00 11 Nov 2023

Dr. Jacob Hochstetler
Distinguished Engineer, Vice President, Fidelity Investments
Clinical Assistant Professor, University of North Texas 
Jacob.Hochstetler@UNT.edu
Jacob.Hochstetler@Fidelity.com
https://github.com/jh125486

* Agenda

- My Background
- An Introduction to Go (`golang`)
- Why I program in Go
- Setup & Documentation
- Competition Pros/Cons/Notes
- A Tangent on Concurrency...
- Builtin performance benchmarking demonstration
- Wrapping Up & Something Fun... _hopefully._

.background image/gopher_eyes_blue.png

* My Background

.background image/hackunt_2023.png  

- *Who* am I
- *What* I do
- *Where* I work
- *Why* I am _here_

.image image/gopher5.png _ 450

* An Introduction to Go

.background image/gopher_eyes_purple.png

Created in 2009 at Google by:

- *Robert* *Griesemer* (V8 JavaScript engine, Java HotSpot and JVM)
- *Rob* *Pike* (UNIX, Plan 9 OS, UTF-8)
- *Ken* *Thompson* (designed/implemented UNIX)
.caption _Fun_Fact_: Development was jump started by their shared *hatred* of C++ ([[http://www.drdobbs.com/open-source/interview-with-ken-thompson/229502480][_true!_]])

*Protip*: _When_searching_on_the_web,_use_ "`golang`" _as_the_search_term._

.image image/Go-Logo_Fuchsia_left.png 250 _

* An Introduction to Go continued (features)

- Statically typed, compiled language (like C), but memory safe, and garbage collected
- CSP-style concurrency: message passing via `channels` & lightweight `goroutines`
- Minimal OOP (no classes or type hierarchy) 
- Structural typing with encapsulated, embeddable, and aliasable types

.image image/gopher_brown.png 275 _
.caption And yes, the mascot is a [[https://go.dev/blog/gopher][Gopher]].

* Hello HackUNT!

.play -numbers -edit code/hello.go
.caption Full program demonstrating the *immortal* Hello World.

.play -numbers -edit code/client_hackunt.go /START OMIT/,/END OMIT/
.caption `main()` snippet printing first ten lines of _HackUNT_ website.

* Why I program in Go

- *Features* (impressive standard library and easy-to-use package system)
- *Fast* (easy to climb up "rungs" on a performance "ladder")
- *Fun* (but still opinionated)

.image image/fancygopher.jpg 350 _
.caption Fancy Gopher, by [[http://reneefrench.blogspot.com][Renée French]]

* A more serious example

.play -numbers -edit code/goroutines.go /START OMIT/,/END OMIT/
.caption Concurrent `goroutines` fighting each other for screen time. (Lines 14, 18 & 22 show the `goroutine` "control".)

.image image/fancygopher.jpg 200 _

* Use in "Industry"

*Web/service* companies:

- Replacing Python where strong typing/performance is needed
- Supplanting Java where simplicity is required ( _and_memory_costs_$$$_ )
- Horizontal scaling with distributed systems and architecture

.image image/black.png 1 350

*Fintech* (Financial Technology):

- Very popular in Blockchain/Hyperledger applications
- Maintainable ← _Underrated_factor_in_complex_systems!_
- Cross-platform
- [[https://go.dev/doc/go1compat][Go1 Compatibility]] (code written for 1.0 will work for 1.X.Y)

.background image/gopher_eyes_green.png

* Local Setup/Online REPL

Compilers available for Windows, Linux & macOS:

- Download Go compiler from [[https://go.dev/dl/][Go.dev]]

macOS w/[[https://brew.sh/][Homebrew]]:

- `brew` `install` `go`

.image image/black.png 1 800

Online REPLs (Read-Eval-Print Loop):

- [[https://go.dev/play/][Official Go Playground]]
- [[https://goplay.tools/][Better Go Playground]]
- [[https://replit.com/languages/go][Replit: Go]]

* Docs/Resources/Channels

Docs:

- [[https://go.dev/doc/][Official Documentation]]
- [[https://pkg.go.dev/std][Standard Library]]

Tutorials/examples: 

- [[https://go.dev/tour][Tour of Go]]
- [[https://gobyexample.com/][Go By Example]]
- [[https://dzone.com/articles/cracking-competitive-programming-with-go][Cracking Competitive Programming With Go (DZone)]]
- [[https://www.digitalocean.com/community/tutorial_series/how-to-code-in-go][DigitalOcean's Tutorial Series]]

YT Channels:

- [[https://www.youtube.com/@GolangCafe][Golang Cafe]]
- [[https://www.youtube.com/@JustForFunc][justforfunc: Programming in Go]]

* Competition Pros/Cons/Notes

.background image/gopher_eyes_peach.png

*Pros*:

- Large builtin standard library
- Easy string processing and input
- Scale out concurrency with `go` keyword

*Cons*:

- Competition support for recent compilers is not great
- Some Competitions don't even support it at all (e.g. [[https://icpc.global/worldfinals/programming-environment#heading-2][ICPC]])
- Many problem sets aren't suitable to parallelizing

_Notes_:

- `fmt` I/O is not buffered by default → use `bufio` instead
- `defer` has a performance impact, so avoid usage

* Competition continued: A Buffered I/O Example

.code -numbers code/buffered_io.go /START OMIT/,/END OMIT/

.image code/buffered_io.png _ 700
.caption STDIN input in red, and STDOUT output in green

* A Tangent: Concurrency != Parallelism

.background image/gopher_eyes_pink.png
   
- Concurrency is the _composition_ of independently executing processes.
- Parallelism is the _simultaneous_ execution of computations. 
- In other words, concurrency is about *dealing* with lots of things at once,⠀⠀⠀⠀⠀⠀⠀ while parallelism is about *doing* lots of things at once.

_Note_:

  Some competition platforms only provide environments with one CPU...
  So while you can program concurrency, you can't execute in parallel.

* Concurrency

[[https://divan.dev/posts/go_concurrency_visualize/][divan's blog: Visualizing Concurrency in Go]]

  ... have you ever wondered - how various concurrency patterns look like?

.image image/workers2.gif 420 _ 
.caption Producer/consumer pattern with 5 workers that each have 3 subworkers

* Builtin performance benchmarking demonstration

.background image/Fid_green_light.png

Fire up laptops and let's head to Github: 

[[https://github.com/jh125486/benchmarking_demo][https://github.com/jh125486/benchmarking_demo]]

.image image/machine-colorized.png _ 700

* Wrapping Up & Something Fun

.background image/gopher_eyes_red.png

- *Go* is an amazing general purpose-language; not well supported in competitions.

- Builtin benchmarking and profiling makes finding slow code faster. 

.play -edit code/imgflip.go /START OMIT/,/END OMIT/
.caption Let's make some memes.

.image image/black.png 1 100

- Personalize your avatar as a _Gopher_: [[https://gopherize.me/][Gophermize.me]]

* Questions ?

.image image/gopher_mic-drop.png 500 _
